// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';



export class Profile implements flatbuffers.IUnpackableObject<ProfileT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Profile {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProfile(bb:flatbuffers.ByteBuffer, obj?:Profile):Profile {
  return (obj || new Profile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProfile(bb:flatbuffers.ByteBuffer, obj?:Profile):Profile {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Profile()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

avatarUrl():string|null
avatarUrl(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
avatarUrl(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

website():string|null
website(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
website(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startProfile(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addAvatarUrl(builder:flatbuffers.Builder, avatarUrlOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, avatarUrlOffset, 0);
}

static addWebsite(builder:flatbuffers.Builder, websiteOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, websiteOffset, 0);
}

static endProfile(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createProfile(builder:flatbuffers.Builder, avatarUrlOffset:flatbuffers.Offset, websiteOffset:flatbuffers.Offset):flatbuffers.Offset {
  Profile.startProfile(builder);
  Profile.addAvatarUrl(builder, avatarUrlOffset);
  Profile.addWebsite(builder, websiteOffset);
  return Profile.endProfile(builder);
}

unpack(): ProfileT {
  return new ProfileT(
    this.avatarUrl(),
    this.website()
  );
}


unpackTo(_o: ProfileT): void {
  _o.avatarUrl = this.avatarUrl();
  _o.website = this.website();
}
}

export class ProfileT implements flatbuffers.IGeneratedObject {
constructor(
  public avatarUrl: string|Uint8Array|null = null,
  public website: string|Uint8Array|null = null
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const avatarUrl = (this.avatarUrl !== null ? builder.createString(this.avatarUrl!) : 0);
  const website = (this.website !== null ? builder.createString(this.website!) : 0);

  return Profile.createProfile(builder,
    avatarUrl,
    website
  );
}
}
